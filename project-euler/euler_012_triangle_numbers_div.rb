#SOLVED - можно улучшить, смотри документ на ProjectEuler

# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over
# five hundred divisors?

require "../Util/prime"

class TriangleNumberDividersSolver
	
	def solve divnum
		infinity = 1.0/0

		@p = Prime.new
		@p.load_primes_upto 10_000

		(2..infinity).each do |number|
			sm = triangle_num number
			return sm if (count_divs sm) > divnum
		end
	end
	
	def count_divs number		

		prime_divs = @p.get_prime_divisors number
		n = count_with_prime_divs prime_divs
		puts "For #{number} by prime divs is #{n}"

		n
	end

	def count_with_prime_divs divs
		
		# The number of divisors D(N) of any integer N can be computed from:
		# D(N) = (a1+1) (a2+1) (a3+1) ( ..
		
		return 2 if divs.length == 1
		prev = divs[0]; s = 1
		cnts = []
		1.upto(divs.length) do |i|
			if divs[i] == prev
				s += 1
			else
				prev = divs[i]
				cnts << s+1
				s = 1
			end
		end
		return cnts.inject(1) {|res, item| res*item }
	end

	def triangle_num natural
		(natural*(natural+1))/2
	end

end

if __FILE__ == $0
	s = TriangleNumberDividersSolver.new
	n = s.solve 1023
	puts n
	puts "Done"
end
